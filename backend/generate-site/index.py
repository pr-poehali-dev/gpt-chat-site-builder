import json
from typing import Dict, Any
from pydantic import BaseModel, Field

class GenerateRequest(BaseModel):
    description: str = Field(..., min_length=1)

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    Business: Generate website code based on user description
    Args: event with httpMethod, body; context with request_id
    Returns: Generated HTML/CSS/JS code structure
    '''
    method: str = event.get('httpMethod', 'GET')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'isBase64Encoded': False,
            'body': json.dumps({'error': 'Method not allowed'})
        }
    
    body_data = json.loads(event.get('body', '{}'))
    request_data = GenerateRequest(**body_data)
    
    description = request_data.description.lower()
    
    template = {
        'html': f'''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Generated Site</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header class="hero">
        <h1>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</h1>
        <p>{description}</p>
        <button class="cta-button">–ù–∞—á–∞—Ç—å</button>
    </header>
    
    <section class="features">
        <div class="feature-card">
            <h3>‚ö° –ë—ã—Å—Ç—Ä–æ</h3>
            <p>–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞</p>
        </div>
        <div class="feature-card">
            <h3>üé® –ö—Ä–∞—Å–∏–≤–æ</h3>
            <p>–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω</p>
        </div>
        <div class="feature-card">
            <h3>üì± –ê–¥–∞–ø—Ç–∏–≤–Ω–æ</h3>
            <p>–†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö</p>
        </div>
    </section>
    
    <footer>
        <p>¬© 2024 Generated by AI Builder</p>
    </footer>
    
    <script src="script.js"></script>
</body>
</html>''',
        'css': '''* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
    background: linear-gradient(135deg, #1a1f2c 0%, #2d1f3d 100%);
    color: #fff;
    min-height: 100vh;
}

.hero {
    text-align: center;
    padding: 100px 20px;
    background: linear-gradient(135deg, #8b5cf6 0%, #d946ef 100%);
}

.hero h1 {
    font-size: 3rem;
    margin-bottom: 1rem;
}

.hero p {
    font-size: 1.2rem;
    margin-bottom: 2rem;
    opacity: 0.9;
}

.cta-button {
    background: white;
    color: #8b5cf6;
    border: none;
    padding: 15px 40px;
    font-size: 1.1rem;
    border-radius: 8px;
    cursor: pointer;
    font-weight: 600;
    transition: transform 0.2s;
}

.cta-button:hover {
    transform: scale(1.05);
}

.features {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
    padding: 80px 20px;
    max-width: 1200px;
    margin: 0 auto;
}

.feature-card {
    background: rgba(255, 255, 255, 0.05);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    padding: 2rem;
    border-radius: 12px;
    text-align: center;
    transition: transform 0.3s;
}

.feature-card:hover {
    transform: translateY(-5px);
}

.feature-card h3 {
    font-size: 2rem;
    margin-bottom: 1rem;
}

footer {
    text-align: center;
    padding: 40px 20px;
    opacity: 0.7;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
}''',
        'js': '''document.addEventListener('DOMContentLoaded', () => {
    const button = document.querySelector('.cta-button');
    const cards = document.querySelectorAll('.feature-card');
    
    button.addEventListener('click', () => {
        alert('–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å! –°–∞–π—Ç —Å–æ–∑–¥–∞–Ω AI Builder');
    });
    
    cards.forEach((card, index) => {
        card.style.animationDelay = `${index * 0.1}s`;
        card.style.animation = 'fadeIn 0.5s ease-out forwards';
    });
});

const style = document.createElement('style');
style.textContent = `
    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
`;
document.head.appendChild(style);''',
        'metadata': {
            'generatedAt': context.request_id,
            'description': request_data.description,
            'framework': 'vanilla',
            'status': 'ready'
        }
    }
    
    return {
        'statusCode': 200,
        'headers': {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
        },
        'isBase64Encoded': False,
        'body': json.dumps(template)
    }
